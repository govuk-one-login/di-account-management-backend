import { __assign, __spreadArray } from "tslib";
/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-empty-interface */
import assert from 'assert';
/**
 * Prettyprints command calls for message
 */
var printCalls = function (ctx, calls) {
    return calls.length > 0
        ? __spreadArray([
            '',
            'Calls:'
        ], calls.map(function (c, i) {
            return "  ".concat(i + 1, ". ").concat(c.args[0].constructor.name, ": ").concat(ctx.utils.printReceived(c.args[0].input));
        }), true) : [];
};
var processMatch = function (_a) {
    var ctx = _a.ctx, mockClient = _a.mockClient, command = _a.command, check = _a.check, message = _a.message;
    assert(command &&
        typeof command === 'function' &&
        typeof command.name === 'string' &&
        command.name.length > 0, 'Command must be valid AWS SDK Command');
    var calls = mockClient.calls();
    var commandCalls = mockClient.commandCalls(command);
    var _b = check({ calls: calls, commandCalls: commandCalls }), pass = _b.pass, data = _b.data;
    var msg = function () {
        var cmd = ctx.utils.printExpected(command.name);
        var client = mockClient.clientName();
        return __spreadArray(__spreadArray([], message({
            client: client,
            cmd: cmd,
            data: data,
            commandCalls: commandCalls,
            notPrefix: ctx.isNot ? 'not ' : '',
        }), true), printCalls(ctx, calls), true).join('\n');
    };
    return { pass: pass, message: msg };
};
var baseMatchers = {
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommand} matcher
     */
    toHaveReceivedCommand: function (mockClient, command) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                return ({ pass: commandCalls.length > 0, data: undefined });
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, notPrefix = _a.notPrefix, commandCalls = _a.commandCalls;
                return [
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd),
                    "".concat(client, " received ").concat(cmd, " ").concat(_this.utils.printReceived(commandCalls.length), " times"),
                ];
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommandTimes} matcher
     */
    toHaveReceivedCommandTimes: function (mockClient, command, expectedCalls) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                return ({ pass: commandCalls.length === expectedCalls, data: undefined });
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, commandCalls = _a.commandCalls, notPrefix = _a.notPrefix;
                return [
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd, " ").concat(_this.utils.printExpected(expectedCalls), " times"),
                    "".concat(client, " received ").concat(cmd, " ").concat(_this.utils.printReceived(commandCalls.length), " times"),
                ];
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedCommandWith} matcher
     */
    toHaveReceivedCommandWith: function (mockClient, command, input) {
        var _this = this;
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            check: function (_a) {
                var commandCalls = _a.commandCalls;
                var matchCount = commandCalls
                    .map(function (call) { return call.args[0].input; }) // eslint-disable-line @typescript-eslint/no-unsafe-return
                    .map(function (received) {
                    try {
                        expect(received).toEqual(expect.objectContaining(input));
                        return true;
                    }
                    catch (e) {
                        return false;
                    }
                })
                    .reduce(function (acc, val) { return acc + Number(val); }, 0);
                return { pass: matchCount > 0, data: { matchCount: matchCount } };
            },
            message: function (_a) {
                var client = _a.client, cmd = _a.cmd, notPrefix = _a.notPrefix, data = _a.data;
                return [
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(cmd, " with ").concat(_this.utils.printExpected(input)),
                    "".concat(client, " received matching ").concat(cmd, " ").concat(_this.utils.printReceived(data.matchCount), " times"),
                ];
            },
        });
    },
    /**
     * implementation of {@link AwsSdkJestMockMatchers.toHaveReceivedNthCommandWith} matcher
     */
    toHaveReceivedNthCommandWith: function (mockClient, call, command, input) {
        var _this = this;
        assert(call && typeof call === 'number' && call > 0, 'Call number must be a number greater than 0');
        return processMatch({
            ctx: this,
            mockClient: mockClient,
            command: command,
            check: function (_a) {
                var calls = _a.calls;
                if (calls.length < call) {
                    return { pass: false, data: { received: undefined } };
                }
                var received = calls[call - 1].args[0];
                var pass = false;
                if (received instanceof command) {
                    try {
                        expect(received.input).toEqual(expect.objectContaining(input));
                        pass = true;
                    }
                    catch (e) { // eslint-disable-line no-empty
                    }
                }
                return {
                    pass: pass,
                    data: { received: received },
                };
            },
            message: function (_a) {
                var cmd = _a.cmd, client = _a.client, data = _a.data, notPrefix = _a.notPrefix;
                return __spreadArray([
                    "Expected ".concat(client, " to ").concat(notPrefix, "receive ").concat(call, ". ").concat(cmd, " with ").concat(_this.utils.printExpected(input))
                ], (data.received
                    ? [
                        "".concat(client, " received ").concat(_this.utils.printReceived(data.received.constructor.name), " with input:"),
                        _this.utils.printDiffOrStringify(input, data.received.input, 'Expected', 'Received', false),
                    ]
                    : []), true);
            },
        });
    },
};
/* typing ensures keys matching */
var aliasMatchers = {
    toReceiveCommandTimes: baseMatchers.toHaveReceivedCommandTimes,
    toReceiveCommand: baseMatchers.toHaveReceivedCommand,
    toReceiveCommandWith: baseMatchers.toHaveReceivedCommandWith,
    toReceiveNthCommandWith: baseMatchers.toHaveReceivedNthCommandWith,
};
// Skip registration if jest expect does not exist
if (typeof expect !== 'undefined' && typeof expect.extend === 'function') {
    expect.extend(__assign(__assign({}, baseMatchers), aliasMatchers));
}
//# sourceMappingURL=jestMatchers.js.map