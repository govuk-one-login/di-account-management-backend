import type { MetadataBearer } from '@aws-sdk/types';
import type { AwsCommand } from 'aws-sdk-client-mock';
interface AwsSdkJestMockBaseMatchers<R> extends Record<string, any> {
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} exact number of {@link times}
     *
     * @param command aws-sdk command constructor
     * @param times
     */
    toHaveReceivedCommandTimes<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, times: number): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} at least one time
     *
     * @param command aws-sdk command constructor
     */
    toHaveReceivedCommand<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} at least one time with matching {@link input}
     *
     * @param command aws-sdk command constructor
     * @param input
     */
    toHaveReceivedCommandWith<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, input: Partial<TCmdInput>): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} as defined {@link call} number
     * with matching {@link input}
     *
     * @param call call number to assert
     * @param command aws-sdk command constructor
     * @param input
     */
    toHaveReceivedNthCommandWith<TCmdInput extends object, TCmdOutput extends MetadataBearer>(call: number, command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, input: Partial<TCmdInput>): R;
}
interface AwsSdkJestMockAliasMatchers<R> {
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} exact number of {@link times}
     *
     * @alias {@link AwsSdkJestMockBaseMatchers.toHaveReceivedCommandTimes}
     * @param command aws-sdk command constructor
     * @param times
     */
    toReceiveCommandTimes<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, times: number): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} at least one time
     *
     * @alias {@link AwsSdkJestMockBaseMatchers.toHaveReceivedCommand}
     * @param command aws-sdk command constructor
     */
    toReceiveCommand<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} at least one time with matching {@link input}
     *
     * @alias {@link AwsSdkJestMockBaseMatchers.toHaveReceivedCommandWith}
     * @param command aws-sdk command constructor
     * @param input
     */
    toReceiveCommandWith<TCmdInput extends object, TCmdOutput extends MetadataBearer>(command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, input: Partial<TCmdInput>): R;
    /**
     * Asserts {@link AwsStub Aws Client Mock} received a {@link command} as defined {@link call} number
     * with matching {@link input}
     *
     * @alias {@link AwsSdkJestMockBaseMatchers.toHaveReceivedNthCommandWith}
     * @param call call number to assert
     * @param command aws-sdk command constructor
     * @param input
     */
    toReceiveNthCommandWith<TCmdInput extends object, TCmdOutput extends MetadataBearer>(call: number, command: new (input: TCmdInput) => AwsCommand<TCmdInput, TCmdOutput>, input: Partial<TCmdInput>): R;
}
/**
 * Provides {@link jest} matcher for testing {@link AwsStub} command calls
 *
 * @example
 *
 * ```ts
 * import { mockClient } from "aws-sdk-client-mock";
 * import { ScanCommand } from "@aws-sdk/client-dynamodb";
 *
 * const awsMock = mockClient(DynamoDBClient);
 *
 * awsMock.on(ScanCommand).resolves({
 *   Items: [{ Info: { S: '{ "val": "info" }' }, LockID: { S: "fooId" } }],
 * });
 *
 * it("Should call scan command", async () => {
 *    // check result ... maybe :)
 *    await expect(sut()).resolves.toEqual({ ... });
 *
 *    // Assert awsMock to have recevied a Scan Command at least one time
 *    expect(awsMock).toHaveReceivedCommand(ScanCommand);
 * });
 * ```
 */
export interface AwsSdkJestMockMatchers<R> extends AwsSdkJestMockBaseMatchers<R>, AwsSdkJestMockAliasMatchers<R>, Record<string, any> {
}
declare global {
    namespace jest {
        interface Matchers<R = void> extends AwsSdkJestMockMatchers<R> {
        }
    }
}
export {};
