import { GetEncryptionMaterials, GetDecryptMaterials, SupportedAlgorithmSuites, MaterialsManager, Keyring } from '@aws-crypto/material-management';
import { CryptographicMaterialsCache, Entry } from './cryptographic_materials_cache';
import { CryptographicMaterialsCacheKeyHelpersInterface } from './build_cryptographic_materials_cache_key_helpers';
export declare function decorateProperties<S extends SupportedAlgorithmSuites>(obj: CachingMaterialsManager<S>, input: CachingMaterialsManagerDecorateInput<S>): void;
export declare function getEncryptionMaterials<S extends SupportedAlgorithmSuites>({ buildEncryptionMaterialCacheKey, }: CryptographicMaterialsCacheKeyHelpersInterface<S>): GetEncryptionMaterials<S>;
export declare function decryptMaterials<S extends SupportedAlgorithmSuites>({ buildDecryptionMaterialCacheKey, }: CryptographicMaterialsCacheKeyHelpersInterface<S>): GetDecryptMaterials<S>;
export declare function cacheEntryHasExceededLimits<S extends SupportedAlgorithmSuites>(): CacheEntryHasExceededLimits<S>;
export interface CachingMaterialsManagerInput<S extends SupportedAlgorithmSuites> extends Readonly<{
    cache: CryptographicMaterialsCache<S>;
    backingMaterials: MaterialsManager<S> | Keyring<S>;
    partition?: string;
    maxBytesEncrypted?: number;
    maxMessagesEncrypted?: number;
    maxAge: number;
}> {
}
export interface CachingMaterialsManagerDecorateInput<S extends SupportedAlgorithmSuites> extends CachingMaterialsManagerInput<S> {
    backingMaterialsManager: MaterialsManager<S>;
    partition: string;
}
export interface CachingMaterialsManager<S extends SupportedAlgorithmSuites> extends MaterialsManager<S> {
    readonly _partition: string;
    readonly _cache: CryptographicMaterialsCache<S>;
    readonly _backingMaterialsManager: MaterialsManager<S>;
    readonly _maxBytesEncrypted: number;
    readonly _maxMessagesEncrypted: number;
    readonly _maxAge: number;
    _cacheEntryHasExceededLimits: CacheEntryHasExceededLimits<S>;
}
export interface CacheEntryHasExceededLimits<S extends SupportedAlgorithmSuites> {
    (entry: Entry<S>): boolean;
}
//# sourceMappingURL=caching_cryptographic_materials_decorators.d.ts.map