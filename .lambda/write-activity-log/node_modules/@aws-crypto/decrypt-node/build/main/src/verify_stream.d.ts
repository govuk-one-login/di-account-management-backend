/// <reference types="node" />
import { Transform } from 'stream';
import { GetVerify, GetDecipher } from '@aws-crypto/material-management-node';
import { HeaderInfo } from '@aws-crypto/serialize';
type AWSVerify = ReturnType<GetVerify>;
declare const PortableTransformWithType: new (...args: any[]) => Transform;
export interface VerifyInfo {
    headerInfo: HeaderInfo;
    getDecipher: GetDecipher;
    dispose: () => void;
    verify?: AWSVerify;
}
export interface VerifyStreamOptions {
    maxBodySize?: number;
}
export declare class VerifyStream extends PortableTransformWithType {
    private _headerInfo;
    private _verifyState;
    private _verify?;
    private _maxBodySize?;
    constructor({ maxBodySize }: VerifyStreamOptions);
    _transform(chunk: Buffer, enc: string, callback: (err?: Error | null, data?: Uint8Array) => void): any;
    push(chunk: any, encoding?: BufferEncoding): boolean;
    _flush(callback: (err?: Error | any | unknown) => void): void;
}
export {};
//# sourceMappingURL=verify_stream.d.ts.map