/// <reference types="node" />
/// <reference types="node" />
import { AlgorithmSuiteIdentifier, KeyringNode, NodeEncryptionMaterial, EncryptionContext, NodeMaterialsManager, ClientOptions } from '@aws-crypto/material-management-node';
import { Duplex } from 'stream';
export interface EncryptStreamInput {
    suiteId?: AlgorithmSuiteIdentifier;
    encryptionContext?: EncryptionContext;
    frameLength?: number;
    plaintextLength?: number;
}
/**
 * Takes a NodeDefaultCryptographicMaterialsManager or a KeyringNode that will
 * be wrapped in a NodeDefaultCryptographicMaterialsManager and returns a stream.
 *
 * @param commitmentPolicy
 * @param maxEncryptedDataKeys
 * @param cmm NodeMaterialsManager|KeyringNode
 * @param op EncryptStreamInput
 */
export declare function _encryptStream({ commitmentPolicy, maxEncryptedDataKeys }: ClientOptions, cmm: KeyringNode | NodeMaterialsManager, op?: EncryptStreamInput): Duplex;
export declare function getEncryptionInfo(material: NodeEncryptionMaterial, frameLength: number): {
    getCipher: import("@aws-crypto/material-management-node").GetCipher;
    dispose: () => void;
    getSigner: import("@aws-crypto/material-management-node").GetSigner | undefined;
    messageHeader: import("@aws-crypto/serialize").MessageHeader;
    rawHeader: (Uint8Array | Buffer)[];
};
//# sourceMappingURL=encrypt_stream.d.ts.map