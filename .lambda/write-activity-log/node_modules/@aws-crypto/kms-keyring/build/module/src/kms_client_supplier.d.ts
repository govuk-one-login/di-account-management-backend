import { AwsEsdkKMSInterface } from './kms_types';
interface KMSConstructibleNonOption<Client extends AwsEsdkKMSInterface, Config> {
    new (config: Config): Client;
}
interface KMSConstructibleOption<Client extends AwsEsdkKMSInterface, Config> {
    new (config?: Config): Client;
}
export type KMSConstructible<Client extends AwsEsdkKMSInterface, Config> = KMSConstructibleNonOption<Client, Config> | KMSConstructibleOption<Client, Config>;
export interface KmsClientSupplier<Client extends AwsEsdkKMSInterface> {
    (region: string): Client | false;
}
export declare function getClient<Client extends AwsEsdkKMSInterface, Config>(KMSClient: KMSConstructible<Client, Config>, defaultConfig?: Config): KmsClientSupplier<Client>;
export declare function limitRegions<Client extends AwsEsdkKMSInterface>(regions: string[], getClient: KmsClientSupplier<Client>): KmsClientSupplier<Client>;
export declare function excludeRegions<Client extends AwsEsdkKMSInterface>(regions: string[], getClient: KmsClientSupplier<Client>): KmsClientSupplier<Client>;
export declare function cacheClients<Client extends AwsEsdkKMSInterface>(getClient: KmsClientSupplier<Client>): KmsClientSupplier<Client>;
export declare function deferCache<Client extends AwsEsdkKMSInterface>(clientsCache: {
    [key: string]: Client | false;
}, region: string, client: Client | false): Client | false;
export {};
//# sourceMappingURL=kms_client_supplier.d.ts.map