import { NodeMaterialsManager, EncryptionRequest, DecryptionRequest, EncryptionContext, NodeAlgorithmSuite, NodeEncryptionMaterial, NodeDecryptionMaterial, KeyringNode, GetEncryptionMaterials, GetDecryptMaterials } from '@aws-crypto/material-management';
export type NodeEncryptionRequest = EncryptionRequest<NodeAlgorithmSuite>;
export type NodeDecryptionRequest = DecryptionRequest<NodeAlgorithmSuite>;
export type NodeGetEncryptionMaterials = GetEncryptionMaterials<NodeAlgorithmSuite>;
export type NodeGetDecryptMaterials = GetDecryptMaterials<NodeAlgorithmSuite>;
/**
 * The NodeDefaultCryptographicMaterialsManager is a specific implementation of the CryptographicMaterialsManager.
 * New cryptography materials managers SHOULD extend from NodeMaterialsManager.
 * Users should never need to create an instance of a NodeDefaultCryptographicMaterialsManager.
 */
export declare class NodeDefaultCryptographicMaterialsManager implements NodeMaterialsManager {
    readonly keyring: KeyringNode;
    constructor(keyring: KeyringNode);
    getEncryptionMaterials({ suite, encryptionContext, commitmentPolicy, }: NodeEncryptionRequest): Promise<NodeEncryptionMaterial>;
    decryptMaterials({ suite, encryptedDataKeys, encryptionContext, }: NodeDecryptionRequest): Promise<NodeDecryptionMaterial>;
    _initializeEncryptionMaterial(suite: NodeAlgorithmSuite, encryptionContext: EncryptionContext): NodeEncryptionMaterial;
    _initializeDecryptionMaterial(suite: NodeAlgorithmSuite, encryptionContext: EncryptionContext): NodeDecryptionMaterial;
}
//# sourceMappingURL=node_cryptographic_materials_manager.d.ts.map