import { EncryptedDataKey } from './encrypted_data_key';
import { EncryptionMaterial, DecryptionMaterial, SupportedAlgorithmSuites } from './types';
import { NodeAlgorithmSuite } from './node_algorithms';
import { WebCryptoAlgorithmSuite } from './web_crypto_algorithms';
export declare abstract class Keyring<S extends SupportedAlgorithmSuites> {
    onEncrypt(material: EncryptionMaterial<S>): Promise<EncryptionMaterial<S>>;
    abstract _onEncrypt(material: EncryptionMaterial<S>): Promise<EncryptionMaterial<S>>;
    onDecrypt(material: DecryptionMaterial<S>, encryptedDataKeys: EncryptedDataKey[]): Promise<DecryptionMaterial<S>>;
    abstract _onDecrypt(material: DecryptionMaterial<S>, encryptedDataKeys: EncryptedDataKey[]): Promise<DecryptionMaterial<S>>;
}
export declare abstract class KeyringNode extends Keyring<NodeAlgorithmSuite> {
}
export declare abstract class KeyringWebCrypto extends Keyring<WebCryptoAlgorithmSuite> {
}
//# sourceMappingURL=keyring.d.ts.map