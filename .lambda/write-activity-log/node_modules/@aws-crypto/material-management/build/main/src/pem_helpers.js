"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.chunk64 = exports.privateKeyPem = exports.publicKeyPem = void 0;
/* Before Node.js v11 the crypto module did not support
 * a method to PEM format a ECDH key.  It has always supported
 * producing such keys: `crypto.createECDH`.  But formatting
 * these keys as a PEM for use in `crypto.Sign` and
 * `crypto.Verify` has not been possible in native `crypto`.
 * As Node.js v6, v8, and v10 reach end of life, this code
 * can be deleted.
 */
// @ts-ignore
const asn1_js_1 = __importDefault(require("asn1.js"));
const Rfc5915Key = asn1_js_1.default.define('Rfc5915Key', function () {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).objid({
        '1 2 840 10045 3 1 7': 'prime256v1',
        '1 3 132 0 34': 'secp384r1',
    }), this.key('publicKey').optional().explicit(1).bitstr());
});
const SpkiKey = asn1_js_1.default.define('SpkiKey', function () {
    this.seq().obj(this.key('algorithmIdentifier')
        .seq()
        .obj(this.key('publicKeyType').objid({
        '1 2 840 10045 2 1': 'EC',
    }), this.key('parameters').objid({
        '1 2 840 10045 3 1 7': 'prime256v1',
        '1 3 132 0 34': 'secp384r1',
    })), this.key('publicKey').bitstr());
});
function publicKeyPem(curve, publicKey) {
    const buff = SpkiKey.encode({
        algorithmIdentifier: {
            publicKeyType: 'EC',
            parameters: curve,
        },
        publicKey: { data: publicKey },
    }, 'der');
    return [
        '-----BEGIN PUBLIC KEY-----',
        ...chunk64(buff),
        '-----END PUBLIC KEY-----',
        '',
    ].join('\n');
}
exports.publicKeyPem = publicKeyPem;
function privateKeyPem(curve, privateKey, publicKey) {
    const buff = Rfc5915Key.encode({
        version: 1,
        privateKey: privateKey,
        parameters: curve,
        publicKey: { data: publicKey },
    }, 'der');
    return [
        '-----BEGIN EC PRIVATE KEY-----',
        ...chunk64(buff),
        '-----END EC PRIVATE KEY-----',
        '',
    ].join('\n');
}
exports.privateKeyPem = privateKeyPem;
function chunk64(buff) {
    const chunkSize = 64;
    const str = buff.toString('base64');
    const numChunks = Math.ceil(str.length / chunkSize);
    const chunks = new Array(numChunks);
    for (let i = 0, o = 0; i < numChunks; ++i, o += chunkSize) {
        chunks[i] = str.slice(o, o + chunkSize);
    }
    return chunks;
}
exports.chunk64 = chunk64;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVtX2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGVtX2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7Ozs7OztBQUV0Qzs7Ozs7OztHQU9HO0FBRUgsYUFBYTtBQUNiLHNEQUF5QjtBQUV6QixNQUFNLFVBQVUsR0FBRyxpQkFBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUU7SUFDMUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FDWixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEQscUJBQXFCLEVBQUUsWUFBWTtRQUNuQyxjQUFjLEVBQUUsV0FBVztLQUM1QixDQUFDLEVBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQ3RELENBQUE7QUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVGLE1BQU0sT0FBTyxHQUFHLGlCQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtJQUNwQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUNaLElBQUksQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7U0FDNUIsR0FBRyxFQUFFO1NBQ0wsR0FBRyxDQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzlCLG1CQUFtQixFQUFFLElBQUk7S0FDMUIsQ0FBQyxFQUNGLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNCLHFCQUFxQixFQUFFLFlBQVk7UUFDbkMsY0FBYyxFQUFFLFdBQVc7S0FDNUIsQ0FBQyxDQUNILEVBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FDL0IsQ0FBQTtBQUNILENBQUMsQ0FBQyxDQUFBO0FBRUYsU0FBZ0IsWUFBWSxDQUFDLEtBQWEsRUFBRSxTQUFpQjtJQUMzRCxNQUFNLElBQUksR0FBVyxPQUFPLENBQUMsTUFBTSxDQUNqQztRQUNFLG1CQUFtQixFQUFFO1lBQ25CLGFBQWEsRUFBRSxJQUFJO1lBQ25CLFVBQVUsRUFBRSxLQUFLO1NBQ2xCO1FBQ0QsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtLQUMvQixFQUNELEtBQUssQ0FDTixDQUFBO0lBRUQsT0FBTztRQUNMLDRCQUE0QjtRQUM1QixHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDaEIsMEJBQTBCO1FBQzFCLEVBQUU7S0FDSCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtBQUNkLENBQUM7QUFsQkQsb0NBa0JDO0FBRUQsU0FBZ0IsYUFBYSxDQUMzQixLQUFhLEVBQ2IsVUFBa0IsRUFDbEIsU0FBaUI7SUFFakIsTUFBTSxJQUFJLEdBQVcsVUFBVSxDQUFDLE1BQU0sQ0FDcEM7UUFDRSxPQUFPLEVBQUUsQ0FBQztRQUNWLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUU7S0FDL0IsRUFDRCxLQUFLLENBQ04sQ0FBQTtJQUVELE9BQU87UUFDTCxnQ0FBZ0M7UUFDaEMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2hCLDhCQUE4QjtRQUM5QixFQUFFO0tBQ0gsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDZCxDQUFDO0FBckJELHNDQXFCQztBQUVELFNBQWdCLE9BQU8sQ0FBQyxJQUFZO0lBQ2xDLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNwQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsQ0FBQTtJQUNuRCxNQUFNLE1BQU0sR0FBYSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUU3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLFNBQVMsRUFBRTtRQUN6RCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFBO0tBQ3hDO0lBRUQsT0FBTyxNQUFNLENBQUE7QUFDZixDQUFDO0FBWEQsMEJBV0MifQ==