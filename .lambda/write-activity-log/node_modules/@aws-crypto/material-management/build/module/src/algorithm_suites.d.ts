export declare enum AlgorithmSuiteIdentifier {
    'ALG_AES128_GCM_IV12_TAG16' = 20,
    'ALG_AES192_GCM_IV12_TAG16' = 70,
    'ALG_AES256_GCM_IV12_TAG16' = 120,
    'ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256' = 276,
    'ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256' = 326,
    'ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256' = 376,
    'ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256' = 532,
    'ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384' = 838,
    'ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384' = 888,
    'ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY' = 1144,
    'ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384' = 1400
}
export declare enum CommitmentPolicy {
    'FORBID_ENCRYPT_ALLOW_DECRYPT' = "FORBID_ENCRYPT_ALLOW_DECRYPT",
    'REQUIRE_ENCRYPT_ALLOW_DECRYPT' = "REQUIRE_ENCRYPT_ALLOW_DECRYPT",
    'REQUIRE_ENCRYPT_REQUIRE_DECRYPT' = "REQUIRE_ENCRYPT_REQUIRE_DECRYPT"
}
export declare enum SignaturePolicy {
    'ALLOW_ENCRYPT_ALLOW_DECRYPT' = "ALLOW_ENCRYPT_ALLOW_DECRYPT",
    'ALLOW_ENCRYPT_FORBID_DECRYPT' = "ALLOW_ENCRYPT_FORBID_DECRYPT"
}
export type NonSigningAlgorithmSuiteIdentifier = Exclude<AlgorithmSuiteIdentifier, typeof AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256 | typeof AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 | typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384 | typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384>;
export declare const NonSigningAlgorithmSuiteIdentifier: {
    readonly [x: number]: string;
    ALG_AES128_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16;
    ALG_AES192_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16;
    ALG_AES256_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16;
    ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
};
export declare const SignaturePolicySuites: Readonly<{
    isDecryptEnabled(signaturePolicy: SignaturePolicy, suite: AlgorithmSuiteIdentifier | AlgorithmSuite, messageId: string): void;
    ALLOW_ENCRYPT_ALLOW_DECRYPT: Readonly<{
        decryptEnabledSuites: typeof AlgorithmSuiteIdentifier;
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
    }>;
    ALLOW_ENCRYPT_FORBID_DECRYPT: Readonly<{
        decryptEnabledSuites: {
            readonly [x: number]: string;
            ALG_AES128_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16;
            ALG_AES192_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16;
            ALG_AES256_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16;
            ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
        };
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
    }>;
}>;
export type NonCommittingAlgorithmSuiteIdentifier = Exclude<AlgorithmSuiteIdentifier, typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY | typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384>;
export declare const NonCommittingAlgorithmSuiteIdentifier: {
    readonly [x: number]: string;
    ALG_AES128_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16;
    ALG_AES192_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16;
    ALG_AES256_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16;
    ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256;
    ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256;
    ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384;
};
export type CommittingAlgorithmSuiteIdentifier = Extract<AlgorithmSuiteIdentifier, typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY | typeof AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384 | (typeof AlgorithmSuiteIdentifier)[0x0478] | (typeof AlgorithmSuiteIdentifier)[0x0578]>;
export declare const CommittingAlgorithmSuiteIdentifier: {
    readonly [x: number]: string;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
    ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
};
export declare const CommitmentPolicySuites: Readonly<{
    isEncryptEnabled(commitmentPolicy: CommitmentPolicy, suite?: AlgorithmSuiteIdentifier | AlgorithmSuite): void;
    isDecryptEnabled(commitmentPolicy: CommitmentPolicy, suite: AlgorithmSuiteIdentifier | AlgorithmSuite, messageId: string): void;
    FORBID_ENCRYPT_ALLOW_DECRYPT: Readonly<{
        encryptEnabledSuites: {
            readonly [x: number]: string;
            ALG_AES128_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16;
            ALG_AES192_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16;
            ALG_AES256_GCM_IV12_TAG16: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16;
            ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA256;
            ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256: AlgorithmSuiteIdentifier.ALG_AES128_GCM_IV12_TAG16_HKDF_SHA256_ECDSA_P256;
            ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES192_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384;
        };
        decryptEnabledSuites: typeof AlgorithmSuiteIdentifier;
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384;
    }>;
    REQUIRE_ENCRYPT_ALLOW_DECRYPT: Readonly<{
        encryptEnabledSuites: {
            readonly [x: number]: string;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
        };
        decryptEnabledSuites: typeof AlgorithmSuiteIdentifier;
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
    }>;
    REQUIRE_ENCRYPT_REQUIRE_DECRYPT: Readonly<{
        encryptEnabledSuites: {
            readonly [x: number]: string;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
        };
        decryptEnabledSuites: {
            readonly [x: number]: string;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY;
            ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
        };
        defaultAlgorithmSuite: AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA512_COMMIT_KEY_ECDSA_P384;
    }>;
}>;
export type AlgorithmSuiteName = keyof typeof AlgorithmSuiteIdentifier;
export type AlgorithmSuiteTypeNode = 'node';
export type AlgorithmSuiteTypeWebCrypto = 'webCrypto';
export type NodeEncryption = 'aes-128-gcm' | 'aes-192-gcm' | 'aes-256-gcm';
export type WebCryptoEncryption = 'AES-GCM';
export type KDF = 'HKDF';
export type Commitment = 'NONE' | 'KEY';
export type NodeHash = 'sha256' | 'sha384' | 'sha512';
export type WebCryptoHash = 'SHA-256' | 'SHA-384' | 'SHA-512';
export type NodeECDHCurve = 'prime256v1' | 'secp384r1';
export type WebCryptoECDHCurve = 'P-256' | 'P-384';
export type KeyLength = 128 | 192 | 256;
export type CommitmentLength = 256;
export type HKDFSaltLengthBytes = 32;
export type IvLength = 12;
export type TagLength = 128;
export type SuiteDataLength = 32;
export declare enum MessageFormat {
    V1 = 1,
    V2 = 2
}
export interface AesGcm {
    id: AlgorithmSuiteIdentifier;
    messageFormat: MessageFormat;
    encryption: NodeEncryption | WebCryptoEncryption;
    keyLength: KeyLength;
    ivLength: IvLength;
    tagLength: TagLength;
    cacheSafe: boolean;
    kdf?: KDF;
    commitment: Commitment;
}
export interface AlgBasic extends AesGcm {
    messageFormat: MessageFormat.V1;
    cacheSafe: false;
    commitment: 'NONE';
}
export interface AlgKdf extends AesGcm {
    messageFormat: MessageFormat.V1;
    cacheSafe: true;
    kdf: 'HKDF';
    kdfHash: NodeHash | WebCryptoHash;
    commitment: 'NONE';
}
export interface AlgKdfSigned extends AlgKdf {
    messageFormat: MessageFormat.V1;
    signatureCurve: NodeECDHCurve | WebCryptoECDHCurve;
    signatureHash: NodeHash | WebCryptoHash;
}
export interface AlgCommitted extends AesGcm {
    messageFormat: MessageFormat.V2;
    cacheSafe: true;
    kdf: 'HKDF';
    kdfHash: NodeHash | WebCryptoHash;
    commitment: 'KEY';
    suiteDataLength: SuiteDataLength;
    commitmentHash: NodeHash | WebCryptoHash;
    commitmentLength: CommitmentLength;
    saltLengthBytes: HKDFSaltLengthBytes;
}
export interface AlgCommittedSigned extends AlgCommitted {
    signatureCurve: NodeECDHCurve | WebCryptoECDHCurve;
    signatureHash: NodeHash | WebCryptoHash;
}
type AlgUnion = AlgBasic | AlgKdf | AlgKdfSigned | AlgCommitted | AlgCommittedSigned;
type AlgorithmSuiteValues = AesGcm & Partial<Omit<AlgBasic, keyof AesGcm>> & Partial<Omit<AlgKdf, keyof AesGcm>> & Partial<Omit<AlgKdfSigned, keyof AesGcm>> & Partial<Omit<AlgCommitted, keyof AesGcm>> & Partial<Omit<AlgCommittedSigned, keyof AesGcm>>;
export declare abstract class AlgorithmSuite implements AlgorithmSuiteValues {
    id: AlgorithmSuiteIdentifier;
    name: AlgorithmSuiteName;
    messageFormat: MessageFormat;
    encryption: NodeEncryption | WebCryptoEncryption;
    keyLength: KeyLength;
    keyLengthBytes: number;
    ivLength: IvLength;
    tagLength: TagLength;
    cacheSafe: boolean;
    kdf?: KDF;
    kdfHash?: NodeHash | WebCryptoHash;
    signatureCurve?: NodeECDHCurve | WebCryptoECDHCurve;
    signatureHash?: NodeHash | WebCryptoHash;
    type: AlgorithmSuiteTypeNode | AlgorithmSuiteTypeWebCrypto;
    suiteDataLength?: SuiteDataLength;
    commitmentHash?: NodeHash | WebCryptoHash;
    commitmentLength?: CommitmentLength;
    saltLengthBytes?: HKDFSaltLengthBytes;
    commitment: Commitment;
    constructor(suiteValues: AlgUnion);
}
export {};
//# sourceMappingURL=algorithm_suites.d.ts.map