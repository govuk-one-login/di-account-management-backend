import { AlgorithmSuite, AlgorithmSuiteIdentifier, NodeEncryption, NodeHash, NodeECDHCurve, AlgorithmSuiteTypeNode, MessageFormat, Commitment, AesGcm, AlgBasic, AlgKdf, AlgKdfSigned, AlgCommitted, AlgCommittedSigned } from './algorithm_suites';
interface NodeAesGcm extends AesGcm {
    encryption: NodeEncryption;
}
type NodeAlgorithmSuiteValues = NodeAesGcm & Partial<Omit<AlgBasic, keyof NodeAesGcm>> & Partial<Omit<AlgKdf, keyof NodeAesGcm>> & Partial<Omit<AlgKdfSigned, keyof NodeAesGcm>> & Partial<Omit<AlgCommitted, keyof NodeAesGcm>> & Partial<Omit<AlgCommittedSigned, keyof NodeAesGcm>>;
export declare class NodeAlgorithmSuite extends AlgorithmSuite implements NodeAlgorithmSuiteValues {
    messageFormat: MessageFormat;
    encryption: NodeEncryption;
    commitment: Commitment;
    kdfHash?: NodeHash;
    signatureCurve?: NodeECDHCurve;
    signatureHash?: NodeHash;
    type: AlgorithmSuiteTypeNode;
    commitmentHash?: NodeHash;
    constructor(id: AlgorithmSuiteIdentifier);
}
export {};
//# sourceMappingURL=node_algorithms.d.ts.map