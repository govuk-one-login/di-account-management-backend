import { CryptographicMaterial, WebCryptoMaterial, MixedBackendCryptoKey, NodeAlgorithmSuite, WebCryptoAlgorithmSuite, AwsEsdkJsCryptoKey, AwsEsdkJsKeyUsage, AwsEsdkKeyObject, KeyringTrace, EncryptionContext } from '@aws-crypto/material-management';
import { WrappingSuiteIdentifier } from './raw_aes_algorithm_suite';
export declare class NodeRawAesMaterial implements Readonly<CryptographicMaterial<NodeRawAesMaterial>> {
    suite: NodeAlgorithmSuite;
    setUnencryptedDataKey: (dataKey: Uint8Array | AwsEsdkKeyObject, trace: KeyringTrace) => NodeRawAesMaterial;
    getUnencryptedDataKey: () => Uint8Array | AwsEsdkKeyObject;
    zeroUnencryptedDataKey: () => NodeRawAesMaterial;
    hasUnencryptedDataKey: boolean;
    keyringTrace: KeyringTrace[];
    encryptionContext: EncryptionContext;
    constructor(suiteId: WrappingSuiteIdentifier);
    hasValidKey(): boolean;
}
export declare class WebCryptoRawAesMaterial implements Readonly<CryptographicMaterial<WebCryptoRawAesMaterial>>, Readonly<WebCryptoMaterial<WebCryptoRawAesMaterial>> {
    suite: WebCryptoAlgorithmSuite;
    setUnencryptedDataKey: (dataKey: Uint8Array | AwsEsdkKeyObject, trace: KeyringTrace) => WebCryptoRawAesMaterial;
    getUnencryptedDataKey: () => Uint8Array | AwsEsdkKeyObject;
    zeroUnencryptedDataKey: () => WebCryptoRawAesMaterial;
    hasUnencryptedDataKey: boolean;
    keyringTrace: KeyringTrace[];
    setCryptoKey: (dataKey: AwsEsdkJsCryptoKey | MixedBackendCryptoKey, trace: KeyringTrace) => WebCryptoRawAesMaterial;
    getCryptoKey: () => AwsEsdkJsCryptoKey | MixedBackendCryptoKey;
    hasCryptoKey: boolean;
    validUsages: ReadonlyArray<AwsEsdkJsKeyUsage>;
    encryptionContext: EncryptionContext;
    constructor(suiteId: WrappingSuiteIdentifier);
    hasValidKey(): boolean;
}
//# sourceMappingURL=raw_aes_material.d.ts.map