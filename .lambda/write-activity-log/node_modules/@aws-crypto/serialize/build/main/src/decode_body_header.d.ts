import { HeaderInfo, BodyHeader, FrameBodyHeader, NonFrameBodyHeader } from './types';
/**
 * decodeBodyHeader
 *
 * I need to be able to parse the BodyHeader, but since the data may be streamed
 * I may not have all the data yet.  The caller is expected to maintain and append
 * to the buffer and call this function with the same readPos until the function
 * returns a BodyHeader.
 *
 * @param buffer Uint8Array
 * @param headerInfo HeaderInfo
 * @param readPos number
 * @returns BodyHeader|false
 */
export declare function decodeBodyHeader(buffer: Uint8Array, headerInfo: HeaderInfo, readPos: number): BodyHeader | false;
/**
 *  Exported for testing.  Used by decodeBodyHeader to compose a complete solution.
 * @param buffer Uint8Array
 * @param headerInfo HeaderInfo
 * @param readPos number
 */
export declare function decodeFrameBodyHeader(buffer: Uint8Array, headerInfo: HeaderInfo, readPos: number): FrameBodyHeader | false;
/**
 *  Exported for testing.  Used by decodeBodyHeader to compose a complete solution.
 * @param buffer Uint8Array
 * @param headerInfo HeaderInfo
 * @param readPos number
 */
export declare function decodeFinalFrameBodyHeader(buffer: Uint8Array, headerInfo: HeaderInfo, readPos: number): FrameBodyHeader | false;
/**
 * Exported for testing.  Used by decodeBodyHeader to compose a complete solution.
 * @param buffer Uint8Array
 * @param headerInfo HeaderInfo
 * @param readPos number
 */
export declare function decodeNonFrameBodyHeader(buffer: Uint8Array, headerInfo: HeaderInfo, readPos: number): NonFrameBodyHeader | false;
//# sourceMappingURL=decode_body_header.d.ts.map