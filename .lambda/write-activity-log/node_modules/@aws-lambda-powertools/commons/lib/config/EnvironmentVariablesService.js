"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentVariablesService = void 0;
const _1 = require(".");
/**
 * Class EnvironmentVariablesService
 *
 * This class is used to return environment variables that are available in the runtime of
 * the current Lambda invocation.
 * These variables can be a mix of runtime environment variables set by AWS and
 * variables that can be set by the developer additionally.
 *
 * @class
 * @extends {ConfigService}
 * @see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime
 * @see https://docs.powertools.aws.dev/lambda-typescript/latest/#environment-variables
 */
class EnvironmentVariablesService extends _1.ConfigService {
    constructor() {
        super(...arguments);
        /**
         * @see https://docs.powertools.aws.dev/lambda-typescript/latest/#environment-variables
         * @protected
         */
        this.serviceNameVariable = 'POWERTOOLS_SERVICE_NAME';
        // Reserved environment variables
        this.xRayTraceIdVariable = '_X_AMZN_TRACE_ID';
    }
    /**
     * It returns the value of an environment variable that has given name.
     *
     * @param {string} name
     * @returns {string}
     */
    get(name) {
        return process.env[name]?.trim() || '';
    }
    /**
     * It returns the value of the POWERTOOLS_SERVICE_NAME environment variable.
     *
     * @returns {string}
     */
    getServiceName() {
        return this.get(this.serviceNameVariable);
    }
    /**
     * It returns the value of the _X_AMZN_TRACE_ID environment variable.
     *
     * The AWS X-Ray Trace data available in the environment variable has this format:
     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,
     *
     * The actual Trace ID is: `1-5759e988-bd862e3fe1be46a994272793`.
     *
     * @returns {string}
     */
    getXrayTraceId() {
        const xRayTraceData = this.getXrayTraceData();
        return xRayTraceData?.Root;
    }
    /**
     * It returns true if the Sampled flag is set in the _X_AMZN_TRACE_ID environment variable.
     *
     * The AWS X-Ray Trace data available in the environment variable has this format:
     * `Root=1-5759e988-bd862e3fe1be46a994272793;Parent=557abcec3ee5a047;Sampled=1`,
     *
     * @returns {boolean}
     */
    getXrayTraceSampled() {
        const xRayTraceData = this.getXrayTraceData();
        return xRayTraceData?.Sampled === '1';
    }
    /**
     * It returns true if the string value represents a boolean true value.
     *
     * @param {string} value
     * @returns boolean
     */
    isValueTrue(value) {
        const truthyValues = ['1', 'y', 'yes', 't', 'true', 'on'];
        return truthyValues.includes(value.toLowerCase());
    }
    /**
     * It parses the key/value data present in the _X_AMZN_TRACE_ID environment variable
     * and returns it as an object when available.
     */
    getXrayTraceData() {
        const xRayTraceEnv = this.get(this.xRayTraceIdVariable);
        if (xRayTraceEnv === '')
            return undefined;
        if (!xRayTraceEnv.includes('='))
            return { Root: xRayTraceEnv };
        const xRayTraceData = {};
        xRayTraceEnv.split(';').forEach((field) => {
            const [key, value] = field.split('=');
            xRayTraceData[key] = value;
        });
        return xRayTraceData;
    }
}
exports.EnvironmentVariablesService = EnvironmentVariablesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW52aXJvbm1lbnRWYXJpYWJsZXNTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9FbnZpcm9ubWVudFZhcmlhYmxlc1NlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsd0JBQWtDO0FBRWxDOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sMkJBQTRCLFNBQVEsZ0JBQWE7SUFBdkQ7O1FBQ0U7OztXQUdHO1FBQ08sd0JBQW1CLEdBQUcseUJBQXlCLENBQUM7UUFDMUQsaUNBQWlDO1FBQ3pCLHdCQUFtQixHQUFHLGtCQUFrQixDQUFDO0lBb0ZuRCxDQUFDO0lBbEZDOzs7OztPQUtHO0lBQ0ksR0FBRyxDQUFDLElBQVk7UUFDckIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGNBQWM7UUFDbkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7SUFDSSxjQUFjO1FBQ25CLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRTlDLE9BQU8sYUFBYSxFQUFFLElBQUksQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLG1CQUFtQjtRQUN4QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUU5QyxPQUFPLGFBQWEsRUFBRSxPQUFPLEtBQUssR0FBRyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFdBQVcsQ0FBQyxLQUFhO1FBQzlCLE1BQU0sWUFBWSxHQUFhLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwRSxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOzs7T0FHRztJQUNLLGdCQUFnQjtRQUN0QixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXhELElBQUksWUFBWSxLQUFLLEVBQUU7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUUxQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7WUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDO1FBRS9ELE1BQU0sYUFBYSxHQUEyQixFQUFFLENBQUM7UUFFakQsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN4QyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFFdEMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FDRjtBQUVRLGtFQUEyQiJ9