"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupMiddlewares = void 0;
const constants_1 = require("./constants");
// Typeguard to assert that an object is of Function type
const isFunction = (obj) => {
    return typeof obj === 'function';
};
/**
 * Function used to cleanup Powertools for AWS resources when a Middy
 * middleware [returns early](https://middy.js.org/docs/intro/early-interrupt)
 * and terminates the middleware chain.
 *
 * When a middleware returns early, all the middleware lifecycle functions
 * that come after it are not executed. This means that if a middleware
 * was relying on certain logic to be run during the `after` or `onError`
 * lifecycle functions, that logic will not be executed.
 *
 * This is the case for the middlewares that are part of Powertools for AWS
 * which rely on these lifecycle functions to perform cleanup operations
 * like closing the current segment in the tracer or flushing any stored
 * metrics.
 *
 * When authoring a middleware that might return early, you can use this
 * function to cleanup Powertools resources. This function will check if
 * any cleanup function is present in the `request.internal` object and
 * execute it.
 *
 * @example
 * ```typescript
 * import middy from '@middy/core';
 * import { cleanupMiddlewares } from '@aws-lambda-powertools/commons/lib/middleware';
 *
 * // Example middleware that returns early
 * const myCustomMiddleware = (): middy.MiddlewareObj => {
 *   const before = async (request: middy.Request): Promise<undefined | string> => {
 *     // If the request is a GET, return early (as an example)
 *     if (request.event.httpMethod === 'GET') {
 *       // Cleanup Powertools resources
 *       await cleanupMiddlewares(request);
 *       // Then return early
 *       return 'GET method not supported';
 *     }
 *   };
 *
 *   return {
 *     before,
 *   };
 * };
 * ```
 *
 * @param request - The Middy request object
 * @param options - An optional object that can be used to pass options to the function
 */
const cleanupMiddlewares = async (request) => {
    const cleanupFunctionNames = [
        constants_1.TRACER_KEY,
        constants_1.METRICS_KEY,
        constants_1.LOGGER_KEY,
        constants_1.IDEMPOTENCY_KEY,
    ];
    for (const functionName of cleanupFunctionNames) {
        if (Object(request.internal).hasOwnProperty(functionName)) {
            const functionReference = request.internal[functionName];
            if (isFunction(functionReference)) {
                await functionReference(request);
            }
        }
    }
};
exports.cleanupMiddlewares = cleanupMiddlewares;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xlYW51cE1pZGRsZXdhcmVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21pZGRsZXdhcmUvY2xlYW51cE1pZGRsZXdhcmVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUtxQjtBQUdyQix5REFBeUQ7QUFDekQsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFZLEVBQTBCLEVBQUU7SUFDMUQsT0FBTyxPQUFPLEdBQUcsS0FBSyxVQUFVLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBRUY7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZDRztBQUNILE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUFFLE9BQXlCLEVBQWlCLEVBQUU7SUFDNUUsTUFBTSxvQkFBb0IsR0FBRztRQUMzQixzQkFBVTtRQUNWLHVCQUFXO1FBQ1gsc0JBQVU7UUFDViwyQkFBZTtLQUNoQixDQUFDO0lBQ0YsS0FBSyxNQUFNLFlBQVksSUFBSSxvQkFBb0IsRUFBRTtRQUMvQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFO1lBQ3pELE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6RCxJQUFJLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUNqQyxNQUFNLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Y7S0FDRjtBQUNILENBQUMsQ0FBQztBQUVPLGdEQUFrQiJ9