/**
 * Returns true if the passed value is a record (object).
 *
 * @param value
 */
declare const isRecord: (value: unknown) => value is Record<string, unknown>;
/**
 * Returns true if the passed value is truthy.
 *
 * @param value
 */
declare const isTruthy: (value: unknown) => boolean;
/**
 * Returns true if the passed value is null or undefined.
 *
 * @param value
 */
declare const isNullOrUndefined: (value: unknown) => value is null | undefined;
/**
 * Returns true if the passed value is a string.
 * @param value
 * @returns
 */
declare const isString: (value: unknown) => value is string;
export { isRecord, isString, isTruthy, isNullOrUndefined };
type JSONPrimitive = string | number | boolean | null | undefined;
type JSONValue = JSONPrimitive | JSONObject | JSONArray;
type JSONObject = {
    [key: string]: JSONValue;
};
type JSONArray = Array<JSONValue>;
export type { JSONPrimitive, JSONValue, JSONObject, JSONArray };
//# sourceMappingURL=utils.d.ts.map