"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_PROVIDERS = exports.AppConfigProvider = void 0;
const base_1 = require("../base");
Object.defineProperty(exports, "DEFAULT_PROVIDERS", { enumerable: true, get: function () { return base_1.DEFAULT_PROVIDERS; } });
const client_appconfigdata_1 = require("@aws-sdk/client-appconfigdata");
const commons_1 = require("@aws-lambda-powertools/commons");
/**
 * ## Intro
 * The Parameters utility provides an AppConfigProvider that allows to retrieve configuration profiles from AWS AppConfig.
 *
 * ## Getting started
 *
 * This utility supports AWS SDK v3 for JavaScript only. This allows the utility to be modular, and you to install only
 * the SDK packages you need and keep your bundle size small.
 *
 * To use the provider, you must install the Parameters utility and the AWS SDK v3 for JavaScript for AppConfig:
 *
 * ```sh
 * npm install @aws-lambda-powertools/parameters @aws-sdk/client-appconfigdata
 * ```
 *
 * ## Basic usage
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a configuration profile
 *   const encodedConfig = await configProvider.get('my-config');
 *   const config = new TextDecoder('utf-8').decode(encodedConfig);
 * };
 * ```
 * If you want to retrieve configs without customizing the provider, you can use the {@link getAppConfig} function instead.
 *
 * ## Advanced usage
 *
 * ### Caching
 *
 * By default, the provider will cache parameters retrieved in-memory for 5 seconds.
 * You can adjust how long values should be kept in cache by using the `maxAge` parameter.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a configuration profile and cache it for 10 seconds
 *   const encodedConfig = await configProvider.get('my-config', { maxAge: 10 });
 *   const config = new TextDecoder('utf-8').decode(encodedConfig);
 * };
 * ```
 *
 * If instead you'd like to always ensure you fetch the latest parameter from the store regardless if already available in cache, use the `forceFetch` parameter.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a config and always fetch the latest value
 *   const config = await configProvider.get('my-config', { forceFetch: true });
 *   const config = new TextDecoder('utf-8').decode(encodedConfig);
 * };
 * ```
 *
 * ### Transformations
 *
 * For configurations stored as freeform JSON, Freature Flag, you can use the transform argument for deserialization. This will return a JavaScript object instead of a string.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a JSON config or Feature Flag and parse it as JSON
 *   const config = await configProvider.get('my-config', { transform: 'json' });
 * };
 * ```
 *
 * For configurations that are instead stored as base64-encoded binary data, you can use the transform argument set to `binary` for decoding. This will return a decoded string.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a base64-encoded string and decode it
 *   const config = await configProvider.get('my-config', { transform: 'binary' });
 * };
 * ```
 *
 * ### Extra SDK options
 *
 * When retrieving a configuration profile, you can pass extra options to the AWS SDK v3 for JavaScript client by using the `sdkOptions` parameter.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 * });
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a config and pass extra options to the AWS SDK v3 for JavaScript client
 *   const config = await configProvider.get('my-config', {
 *     sdkOptions: {
 *       RequiredMinimumPollIntervalInSeconds: 60,
 *     },
 *   });
 *   const config = new TextDecoder('utf-8').decode(encodedConfig);
 * };
 * ```
 *
 * This object accepts the same options as the [AWS SDK v3 for JavaScript AppConfigData client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-appconfigdata/interfaces/startconfigurationsessioncommandinput.html).
 *
 * ### Customize AWS SDK v3 for JavaScript client
 *
 * By default, the provider will create a new AppConfigData client using the default configuration.
 *
 * You can customize the client by passing a custom configuration object to the provider.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 *
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 *   clientConfig: { region: 'eu-west-1' },
 * });
 * ```
 *
 * This object accepts the same options as the [AWS SDK v3 for JavaScript AppConfig Data client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-appconfigdata/interfaces/appconfigdataclientconfig.html).
 *
 * Otherwise, if you want to use a custom client altogether, you can pass it to the provider.
 *
 * @example
 * ```typescript
 * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
 * import { AppConfigDataClient } from '@aws-sdk/client-appconfigdata';
 *
 * const client = new AppConfigDataClient({ region: 'eu-west-1' });
 * const configProvider = new AppConfigProvider({
 *   application: 'my-app',
 *   environment: 'prod',
 *   awsSdkV3Client: client,
 * });
 * ```
 *
 * This object must be an instance of the [AWS SDK v3 for JavaScript AppConfig Data client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-appconfigdata/classes/appconfigdataclient.html).
 *
 * For more usage examples, see [our documentation](https://docs.powertools.aws.dev/lambda-typescript/latest/utilities/parameters/).
 */
class AppConfigProvider extends base_1.BaseProvider {
    /**
     * It initializes the AppConfigProvider class.
     * *
     * @param {AppConfigProviderOptions} options - The configuration object.
     */
    constructor(options) {
        super();
        this.configurationTokenStore = new Map();
        this.valueStore = new Map();
        if (options?.awsSdkV3Client) {
            if (options?.awsSdkV3Client instanceof client_appconfigdata_1.AppConfigDataClient) {
                this.client = options.awsSdkV3Client;
            }
            else {
                throw Error('Not a valid AppConfigDataClient provided');
            }
        }
        else {
            this.client = new client_appconfigdata_1.AppConfigDataClient(options.clientConfig || {});
        }
        (0, commons_1.addUserAgentMiddleware)(this.client, 'parameters');
        this.application =
            options?.application || this.envVarsService.getServiceName();
        if (!this.application || this.application.trim().length === 0) {
            throw new Error('Application name is not defined or POWERTOOLS_SERVICE_NAME is not set');
        }
        this.environment = options.environment;
    }
    /**
     * Retrieve a configuration profile from AWS AppConfig.
     *
     * @example
     * ```typescript
     * import { AppConfigProvider } from '@aws-lambda-powertools/parameters/appconfig';
     *
     * const configProvider = new AppConfigProvider({
     *   application: 'my-app',
     *   environment: 'prod',
     * });
     *
     * export const handler = async (): Promise<void> => {
     *   // Retrieve a configuration profile
     *   const encodedConfig = await configProvider.get('my-config');
     *   const config = new TextDecoder('utf-8').decode(encodedConfig);
     * };
     * ```
     *
     * You can customize the retrieval of the configuration profile by passing options to the function:
     * * `maxAge` - The maximum age of the value in cache before fetching a new one (in seconds) (default: 5)
     * * `forceFetch` - Whether to always fetch a new value from the store regardless if already available in cache
     * * `transform` - Whether to transform the value before returning it. Supported values: `json`, `binary`
     * * `sdkOptions` - Extra options to pass to the AWS SDK v3 for JavaScript client
     *
     * For usage examples check {@link AppConfigProvider}.
     *
     * @param {string} name - The name of the configuration profile or its ID
     * @param {AppConfigGetOptions} options - Options to configure the provider
     * @see https://docs.powertools.aws.dev/lambda-typescript/latest/utilities/parameters/
     */
    async get(name, options) {
        return super.get(name, options);
    }
    /**
     * Retrieving multiple configurations is not supported by AWS AppConfig.
     */
    async getMultiple(path, _options) {
        await super.getMultiple(path);
    }
    /**
     * Retrieve a configuration from AWS AppConfig.
     *
     * @param {string} name - Name of the configuration or its ID
     * @param {AppConfigGetOptions} options - SDK options to propagate to `StartConfigurationSession` API call
     */
    async _get(name, options) {
        /**
         * The new AppConfig APIs require two API calls to return the configuration
         * First we start the session and after that we retrieve the configuration
         * We need to store { name: token } pairs to use in the next execution
         * We also need to store { name : value } pairs because AppConfig returns
         * an empty value if the session already has the latest configuration
         * but, we don't want to return an empty value to our callers.
         * {@link https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration.html}
         **/
        if (!this.configurationTokenStore.has(name)) {
            const sessionOptions = {
                ...(options?.sdkOptions || {}),
                ApplicationIdentifier: this.application,
                ConfigurationProfileIdentifier: name,
                EnvironmentIdentifier: this.environment,
            };
            const sessionCommand = new client_appconfigdata_1.StartConfigurationSessionCommand(sessionOptions);
            const session = await this.client.send(sessionCommand);
            if (!session.InitialConfigurationToken)
                throw new Error('Unable to retrieve the configuration token');
            this.configurationTokenStore.set(name, session.InitialConfigurationToken);
        }
        const getConfigurationCommand = new client_appconfigdata_1.GetLatestConfigurationCommand({
            ConfigurationToken: this.configurationTokenStore.get(name),
        });
        const response = await this.client.send(getConfigurationCommand);
        if (response.NextPollConfigurationToken) {
            this.configurationTokenStore.set(name, response.NextPollConfigurationToken);
        }
        else {
            this.configurationTokenStore.delete(name);
        }
        /** When the response is not empty, stash the result locally before returning
         * See AppConfig docs:
         * {@link https://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration.html}
         **/
        if (response.Configuration !== undefined &&
            response.Configuration?.length > 0) {
            this.valueStore.set(name, response.Configuration);
            return response.Configuration;
        }
        // Otherwise, use a stashed value
        return this.valueStore.get(name);
    }
    /**
     * Retrieving multiple configurations is not supported by AWS AppConfig.
     *
     * @throws Not Implemented Error.
     */
    async _getMultiple(_path, _sdkOptions) {
        throw new Error('Method not implemented.');
    }
}
exports.AppConfigProvider = AppConfigProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwQ29uZmlnUHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYXBwY29uZmlnL0FwcENvbmZpZ1Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtDQUEwRDtBQTZXOUIsa0dBN1dMLHdCQUFpQixPQTZXSztBQTVXN0Msd0VBSXVDO0FBT3ZDLDREQUF3RTtBQUV4RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEtHO0FBQ0gsTUFBTSxpQkFBa0IsU0FBUSxtQkFBWTtJQU8xQzs7OztPQUlHO0lBQ0gsWUFBbUIsT0FBaUM7UUFDbEQsS0FBSyxFQUFFLENBQUM7UUFYQSw0QkFBdUIsR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztRQUNwRCxlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQXNCLENBQUM7UUFXbkQsSUFBSSxPQUFPLEVBQUUsY0FBYyxFQUFFO1lBQzNCLElBQUksT0FBTyxFQUFFLGNBQWMsWUFBWSwwQ0FBbUIsRUFBRTtnQkFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDO2FBQ3RDO2lCQUFNO2dCQUNMLE1BQU0sS0FBSyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7YUFDekQ7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDBDQUFtQixDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksRUFBRSxDQUFDLENBQUM7U0FDbkU7UUFFRCxJQUFBLGdDQUFzQixFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFFbEQsSUFBSSxDQUFDLFdBQVc7WUFDZCxPQUFPLEVBQUUsV0FBVyxJQUFJLElBQUksQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdELE1BQU0sSUFBSSxLQUFLLENBQ2IsdUVBQXVFLENBQ3hFLENBQUM7U0FDSDtRQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQThCRztJQUNJLEtBQUssQ0FBQyxHQUFHLENBTWQsSUFBWSxFQUNaLE9BQXVEO1FBS3ZELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUc3QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFZLEVBQUUsUUFBa0I7UUFDdkQsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNPLEtBQUssQ0FBQyxJQUFJLENBQ2xCLElBQVksRUFDWixPQUE2QjtRQUU3Qjs7Ozs7Ozs7WUFRSTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzNDLE1BQU0sY0FBYyxHQUEwQztnQkFDNUQsR0FBRyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDO2dCQUM5QixxQkFBcUIsRUFBRSxJQUFJLENBQUMsV0FBVztnQkFDdkMsOEJBQThCLEVBQUUsSUFBSTtnQkFDcEMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLFdBQVc7YUFDeEMsQ0FBQztZQUVGLE1BQU0sY0FBYyxHQUFHLElBQUksdURBQWdDLENBQ3pELGNBQWMsQ0FDZixDQUFDO1lBRUYsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUV2RCxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QjtnQkFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1lBRWhFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1NBQzNFO1FBRUQsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLG9EQUE2QixDQUFDO1lBQ2hFLGtCQUFrQixFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1NBQzNELENBQUMsQ0FBQztRQUVILE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUVqRSxJQUFJLFFBQVEsQ0FBQywwQkFBMEIsRUFBRTtZQUN2QyxJQUFJLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUM5QixJQUFJLEVBQ0osUUFBUSxDQUFDLDBCQUEwQixDQUNwQyxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0M7UUFFRDs7O1lBR0k7UUFDSixJQUNFLFFBQVEsQ0FBQyxhQUFhLEtBQUssU0FBUztZQUNwQyxRQUFRLENBQUMsYUFBYSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQ2xDO1lBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUVsRCxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUM7U0FDL0I7UUFFRCxpQ0FBaUM7UUFDakMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNPLEtBQUssQ0FBQyxZQUFZLENBQzFCLEtBQWEsRUFDYixXQUFxQjtRQUVyQixNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNGO0FBRVEsOENBQWlCIn0=