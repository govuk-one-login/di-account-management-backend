"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretsProvider = void 0;
const base_1 = require("../base");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const commons_1 = require("@aws-lambda-powertools/commons");
/**
 * ## Intro
 * The Parameters utility provides a SecretsProvider that allows to retrieve secrets from AWS Secrets Manager.
 *
 * ## Getting started
 *
 * This utility supports AWS SDK v3 for JavaScript only. This allows the utility to be modular, and you to install only
 * the SDK packages you need and keep your bundle size small.
 *
 * To use the provider, you must install the Parameters utility and the AWS SDK v3 for JavaScript for Secrets Manager:
 *
 * ```sh
 * npm install @aws-lambda-powertools/parameters @aws-sdk/client-secrets-manager
 * ```
 *
 * ## Basic usage
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider();
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a secret
 *   const secret = await secretsProvider.get('my-secret');
 * };
 * ```
 *
 * If you want to retrieve secrets without customizing the provider, you can use the {@link getSecret} function instead.
 *
 * ## Advanced usage
 *
 * ### Caching
 *
 * By default, the provider will cache parameters retrieved in-memory for 5 seconds.
 * You can adjust how long values should be kept in cache by using the `maxAge` parameter.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider();
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a secret and cache it for 10 seconds
 *   const secret = await secretsProvider.get('my-secret', { maxAge: 10 });
 * };
 * ```
 *
 * If instead you'd like to always ensure you fetch the latest parameter from the store regardless if already available in cache, use the `forceFetch` parameter.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider();
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a secret and always fetch the latest value
 *   const secret = await secretsProvider.get('my-secret', { forceFetch: true });
 * };
 * ```
 *
 * ### Transformations
 *
 * For parameters stored in JSON or Base64 format, you can use the transform argument for deserialization.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider();
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a secret and parse it as JSON
 *   const secret = await secretsProvider.get('my-secret', { transform: 'json' });
 * };
 * ```
 *
 * ### Extra SDK options
 *
 * When retrieving a secret, you can pass extra options to the AWS SDK v3 for JavaScript client by using the `sdkOptions` parameter.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider();
 *
 * export const handler = async (): Promise<void> => {
 *   // Retrieve a secret and pass extra options to the AWS SDK v3 for JavaScript client
 *   const secret = await secretsProvider.get('my-secret', {
 *     sdkOptions: {
 *       VersionId: 1,
 *     },
 *   });
 * };
 * ```
 *
 * This object accepts the same options as the [AWS SDK v3 for JavaScript Secrets Manager client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-secrets-manager/interfaces/getsecretvaluecommandinput.html).
 *
 * ### Customize AWS SDK v3 for JavaScript client
 *
 * By default, the provider will create a new Secrets Manager client using the default configuration.
 *
 * You can customize the client by passing a custom configuration object to the provider.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 *
 * const secretsProvider = new SecretsProvider({
 *  clientConfig: { region: 'eu-west-1' },
 * });
 * ```
 *
 * This object accepts the same options as the [AWS SDK v3 for JavaScript Secrets Manager client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-secrets-manager/interfaces/secretsmanagerclientconfig.html).
 *
 * Otherwise, if you want to use a custom client altogether, you can pass it to the provider.
 *
 * @example
 * ```typescript
 * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
 * import { SecretsManagerClient } from '@aws-sdk/client-secrets-manager';
 *
 * const client = new SecretsManagerClient({ region: 'eu-west-1' });
 * const secretsProvider = new SecretsProvider({
 *  awsSdkV3Client: client,
 * });
 * ```
 *
 * This object must be an instance of the [AWS SDK v3 for JavaScript Secrets Manager client](https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-secrets-manager/classes/secretsmanagerclient.html).
 *
 * For more usage examples, see [our documentation](https://docs.powertools.aws.dev/lambda-typescript/latest/utilities/parameters/).
 *
 * @class
 * @implements {BaseProvider}
 * @see https://docs.powertools.aws.dev/lambda-typescript/latest/utilities/parameters/
 */
class SecretsProvider extends base_1.BaseProvider {
    /**
     * It initializes the SecretsProvider class.
     *
     * @param {SecretsProviderOptions} config - The configuration object.
     */
    constructor(config) {
        super();
        if (config?.awsSdkV3Client) {
            if (config?.awsSdkV3Client instanceof client_secrets_manager_1.SecretsManagerClient) {
                this.client = config.awsSdkV3Client;
            }
            else {
                throw Error('Not a valid SecretsManagerClient provided');
            }
        }
        else {
            const clientConfig = config?.clientConfig || {};
            this.client = new client_secrets_manager_1.SecretsManagerClient(clientConfig);
        }
        (0, commons_1.addUserAgentMiddleware)(this.client, 'parameters');
    }
    /**
     * Retrieve a secret from AWS Secrets Manager.
     *
     * @example
     * ```typescript
     * import { SecretsProvider } from '@aws-lambda-powertools/parameters/secrets';
     *
     * const secretsProvider = new SecretsProvider();
     *
     * export const handler = async (): Promise<void> => {
     *   // Retrieve a secret
     *   const secret = await secretsProvider.get('my-secret');
     * };
     * ```
     *
     * You can customize the retrieval of the secret by passing options to the function:
     * * `maxAge` - The maximum age of the value in cache before fetching a new one (in seconds) (default: 5)
     * * `forceFetch` - Whether to always fetch a new value from the store regardless if already available in cache
     * * `transform` - Whether to transform the value before returning it. Supported values: `json`, `binary`
     * * `sdkOptions` - Extra options to pass to the AWS SDK v3 for JavaScript client
     *
     * For usage examples check {@link SecretsProvider}.
     *
     * @param {string} name - The name of the secret
     * @param {SecretsGetOptions} options - Options to customize the retrieval of the secret
     * @see https://docs.powertools.aws.dev/lambda-typescript/latest/utilities/parameters/
     */
    async get(name, options) {
        return super.get(name, options);
    }
    /**
     * Retrieving multiple parameter values is not supported with AWS Secrets Manager.
     */
    async getMultiple(path, _options) {
        await super.getMultiple(path);
    }
    /**
     * Retrieve a configuration from AWS Secrets Manager.
     *
     * @param {string} name - Name of the configuration or its ID
     * @param {SecretsGetOptions} options - SDK options to propagate to the AWS SDK v3 for JavaScript client
     */
    async _get(name, options) {
        const sdkOptions = {
            ...(options?.sdkOptions || {}),
            SecretId: name,
        };
        const result = await this.client.send(new client_secrets_manager_1.GetSecretValueCommand(sdkOptions));
        if (result.SecretString)
            return result.SecretString;
        return result.SecretBinary;
    }
    /**
     * Retrieving multiple parameter values is not supported with AWS Secrets Manager.
     *
     * @throws Not Implemented Error.
     */
    async _getMultiple(_path, _options) {
        throw new Error('Method not implemented.');
    }
}
exports.SecretsProvider = SecretsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VjcmV0c1Byb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlY3JldHMvU2VjcmV0c1Byb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtDQUF1QztBQUN2Qyw0RUFHeUM7QUFPekMsNERBQXdFO0FBRXhFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMklHO0FBQ0gsTUFBTSxlQUFnQixTQUFRLG1CQUFZO0lBR3hDOzs7O09BSUc7SUFDSCxZQUFtQixNQUErQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksTUFBTSxFQUFFLGNBQWMsRUFBRTtZQUMxQixJQUFJLE1BQU0sRUFBRSxjQUFjLFlBQVksNkNBQW9CLEVBQUU7Z0JBQzFELElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQzthQUNyQztpQkFBTTtnQkFDTCxNQUFNLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO2FBQzFEO1NBQ0Y7YUFBTTtZQUNMLE1BQU0sWUFBWSxHQUFHLE1BQU0sRUFBRSxZQUFZLElBQUksRUFBRSxDQUFDO1lBQ2hELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSw2Q0FBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUEsZ0NBQXNCLEVBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BMEJHO0lBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FNZCxJQUFZLEVBQ1osT0FBcUQ7UUFLckQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBRzdCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQVksRUFBRSxRQUFrQjtRQUN2RCxNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ08sS0FBSyxDQUFDLElBQUksQ0FDbEIsSUFBWSxFQUNaLE9BQTJCO1FBRTNCLE1BQU0sVUFBVSxHQUErQjtZQUM3QyxHQUFHLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLENBQUM7WUFDOUIsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDbkMsSUFBSSw4Q0FBcUIsQ0FBQyxVQUFVLENBQUMsQ0FDdEMsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLFlBQVk7WUFBRSxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFFcEQsT0FBTyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7OztPQUlHO0lBQ08sS0FBSyxDQUFDLFlBQVksQ0FDMUIsS0FBYSxFQUNiLFFBQWtCO1FBRWxCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0Y7QUFFUSwwQ0FBZSJ9