import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  KMSClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../KMSClient";
import { EncryptRequest, EncryptResponse } from "../models/models_0";
export { __MetadataBearer, $Command };
export interface EncryptCommandInput extends EncryptRequest {}
export interface EncryptCommandOutput
  extends EncryptResponse,
    __MetadataBearer {}
export declare class EncryptCommand extends $Command<
  EncryptCommandInput,
  EncryptCommandOutput,
  KMSClientResolvedConfig
> {
  readonly input: EncryptCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: EncryptCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: KMSClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<EncryptCommandInput, EncryptCommandOutput>;
  private serialize;
  private deserialize;
}
