import { EndpointParameterInstructions } from "@smithy/middleware-endpoint";
import { Command as $Command } from "@smithy/smithy-client";
import {
  Handler,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
} from "@smithy/types";
import {
  KMSClientResolvedConfig,
  ServiceInputTypes,
  ServiceOutputTypes,
} from "../KMSClient";
import { VerifyRequest, VerifyResponse } from "../models/models_0";
export { __MetadataBearer, $Command };
export interface VerifyCommandInput extends VerifyRequest {}
export interface VerifyCommandOutput extends VerifyResponse, __MetadataBearer {}
export declare class VerifyCommand extends $Command<
  VerifyCommandInput,
  VerifyCommandOutput,
  KMSClientResolvedConfig
> {
  readonly input: VerifyCommandInput;
  static getEndpointParameterInstructions(): EndpointParameterInstructions;
  constructor(input: VerifyCommandInput);
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: KMSClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<VerifyCommandInput, VerifyCommandOutput>;
  private serialize;
  private deserialize;
}
