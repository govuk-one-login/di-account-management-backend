AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "A template to create the GOV.UK One login Account backend infrastructure."

Parameters:
  UserServicesStoreTableName:
    Type: String
    Default: user_services
  RawEventsStoreTableName:
    Type: String
    Default: raw_events
  Environment:
    Description: "The environment type"
    Type: "String"
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
    ConstraintDescription: must be dev, build, staging, integration or production
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
    Default: vpc-enhanced
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"

  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

  IsNotDevelopment:
    Fn::Not:
      - Fn::Equals:
          - !Ref Environment
          - "dev"

  UseInternalEvents: !Or
    - !Equals [!Ref Environment, dev]
    - !Equals [!Ref Environment, build]

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Mappings:
  InputQueue:
    dev:
      QueueArn: ""
      KeyArn: ""
    build:
      QueueArn: ""
      KeyArn: ""
    staging:
      QueueArn: "arn:aws:sqs:eu-west-2:178023842775:PublishToAccountsSQSQueue-staging"
      KeyArn: "arn:aws:kms:eu-west-2:178023842775:key/0b1e15d0-ea22-440e-b153-3842d60293ad"
    integration:
      QueueArn: "arn:aws:sqs:eu-west-2:729485541398:PublishToAccountsSQSQueue-integration"
      KeyArn: "arn:aws:kms:eu-west-2:729485541398:key/6e41cb14-5506-4a03-9115-c21999575dda"
    production:
      QueueArn: "arn:aws:sqs:eu-west-2:451773080033:PublishToAccountsSQSQueue-production"
      KeyArn: "arn:aws:kms:eu-west-2:451773080033:key/3ece5761-145f-43c7-ae2e-4485c91fe6bd"

Resources:
  ######################################
  # Raw events store
  ######################################
  RawEventsStore:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref RawEventsStoreTableName
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DatabaseKmsKey.Arn
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: remove_at
        Enabled: true
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Account Management Backend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Environment
          Value: !Ref "Environment"
        - Key: Source
          Value: "https://github.com/alphagov/di-account-management-backend/blob/main/infrastructure/template.yaml"

  ######################################
  # User services store
  ######################################
  UserServicesStore:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref UserServicesStoreTableName
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      Tags:
        - Key: Product
          Value: GOV.UK Sign In
        - Key: System
          Value: Account Management Backend
        - Key: Owner
          Value: govuk-accounts-tech@digital.cabinet-office.gov.uk
        - Key: Environment
          Value: !Ref "Environment"
        - Key: Source
          Value: "https://github.com/alphagov/di-account-management-backend/blob/main/infrastructre/template.yaml"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !GetAtt DatabaseKmsKey.Arn

  ######################################
  # TxMA Event Queue (Dummy for now)
  ######################################
  TxMAInputDummyQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
  ######################
  # Save Raw Events
  ######################
  SaveRawEventsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - SaveRawEventsFunctionLogGroup
    Properties:
      FunctionName: !Sub ${Environment}-${AWS::StackName}-save-raw-events
      Architectures: ["x86_64"]
      CodeUri: ../lambda/save-raw-events/
      Events:
        InputQueue:
          Type: SQS
          Properties:
            Queue: !If
              - UseInternalEvents
              - !GetAtt TxMAInputDummyQueue.Arn
              - !FindInMap [InputQueue, !Ref Environment, QueueArn]
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt SaveRawEventsDeadLetterQueue.Arn
      Handler: save-raw-events.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Runtime: nodejs16.x
      Role: !GetAtt SaveRawEventsRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref RawEventsStoreTableName
          DLQ_URL: !Ref SaveRawEventsDeadLetterQueue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - save-raw-events.ts

  SaveRawEventsDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  SaveRawEventsRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref SaveRawEventsPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  SaveRawEventsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !If
              - UseInternalEvents
              - !GetAtt TxMAInputDummyQueue.Arn
              - !FindInMap [InputQueue, !Ref Environment, QueueArn]
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt SaveRawEventsDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt RawEventsStore.Arn
              - !Sub
                - "${Arn}/*"
                - Arn: !GetAtt RawEventsStore.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt QueueKmsKey.Arn
              - !GetAtt DatabaseKmsKey.Arn
              - !If
                - UseInternalEvents
                - !Ref AWS::NoValue
                - !FindInMap [InputQueue, !Ref Environment, KeyArn]

  SaveRawEventsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-save-raw-events"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  SaveRawEventsCSLSSubscription:
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Logs/Subscription/CSLS/ARN}}"
      FilterPattern: ""
      LogGroupName: !Ref SaveRawEventsFunctionLogGroup

  SaveDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [!Ref AWS::StackName, !Ref Environment, SaveDeadLetterQueueAlarm],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt SaveRawEventsDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  ######################
  # Querying the Record
  ######################
  QueryUserServicesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - QueryUserServicesFunctionLogGroup
    Properties:
      FunctionName: !Sub ${Environment}-${AWS::StackName}-query-user-services
      Architectures: ["x86_64"]
      CodeUri: ../lambda/query-user-services/
      Events:
        DynamoStream:
          Type: DynamoDB
          Properties:
            BatchSize: 1
            Stream: !GetAtt RawEventsStore.StreamArn
            Enabled: true
            DestinationConfig:
              OnFailure:
                Destination: !GetAtt QueryUserServicesDeadLetterQueue.Arn
            StartingPosition: LATEST
            FilterCriteria:
              Filters:
                - Pattern: '{ "eventName": ["INSERT"] }'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt QueryUserServicesDeadLetterQueue.Arn
      Handler: query-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Runtime: nodejs16.x
      Role: !GetAtt QueryUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref QueryUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToFormatQueue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - query-user-services.ts

  QueryUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  QueryUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref QueryUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  QueryUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt TxMAInputDummyQueue.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt UserServicesToFormatQueue.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt QueryUserServicesDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:GetItem
            Resource:
              - !GetAtt UserServicesStore.Arn
              - !Sub
                - "${Arn}/*"
                - Arn: !GetAtt UserServicesStore.Arn
          - Effect: Allow
            Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
            Resource:
              - !GetAtt RawEventsStore.StreamArn
              - !Sub
                - "${Arn}/*"
                - Arn: !GetAtt RawEventsStore.StreamArn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt QueueKmsKey.Arn
              - !GetAtt DatabaseKmsKey.Arn

  QueryUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-query-user-services"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  QueryUserServicesCSLSSubscription:
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Logs/Subscription/CSLS/ARN}}"
      FilterPattern: ""
      LogGroupName: !Ref QueryUserServicesFunctionLogGroup

  UserServicesToFormatQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  QueryDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [!Ref AWS::StackName, !Ref Environment, QueryDeadLetterQueueAlarm],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt QueryUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Formatting the Record
  #######################
  FormatUserServicesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - FormatUserServicesFunctionLogGroup
    Properties:
      FunctionName: !Sub ${Environment}-${AWS::StackName}-format-user-services
      Architectures: ["x86_64"]
      CodeUri: ../lambda/format-user-services/
      Events:
        UserServicesToFormatQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToFormatQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt FormatUserServicesDeadLetterQueue.Arn
      Handler: format-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Runtime: nodejs16.x
      Role: !GetAtt FormatUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          DLQ_URL: !Ref FormatUserServicesDeadLetterQueue
          OUTPUT_QUEUE_URL: !Ref UserServicesToWriteQueue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - format-user-services.ts

  FormatUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  FormatUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref FormatUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  FormatUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt UserServicesToFormatQueue.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt FormatUserServicesDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt UserServicesToWriteQueue.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: !GetAtt QueueKmsKey.Arn

  FormatUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-format-user-services"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  FormatUserServicesCSLSSubscription:
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Logs/Subscription/CSLS/ARN}}"
      FilterPattern: ""
      LogGroupName: !Ref FormatUserServicesFunctionLogGroup

  UserServicesToWriteQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete

  FormatDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [!Ref AWS::StackName, !Ref Environment, FormatDeadLetterQueueAlarm],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt FormatUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  ###################
  # Write the Record
  ###################
  WriteUserServicesFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - WriteUserServicesFunctionLogGroup
    Properties:
      FunctionName: !Sub ${Environment}-${AWS::StackName}-write-user-services
      Architectures: ["x86_64"]
      CodeUri: ../lambda/write-user-services/
      Events:
        UserServicesToWriteQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt UserServicesToWriteQueue.Arn
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt WriteUserServicesDeadLetterQueue.Arn
      Handler: write-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Runtime: nodejs16.x
      Role: !GetAtt WriteServiceRecordRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref WriteUserServicesDeadLetterQueue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - write-user-services.ts

  WriteUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  WriteServiceRecordRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref WriteServiceRecordPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  WriteServiceRecordPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt UserServicesToWriteQueue.Arn
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt WriteUserServicesDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - !GetAtt UserServicesStore.Arn
              - !Sub
                - "${Arn}/*"
                - Arn: !GetAtt UserServicesStore.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt QueueKmsKey.Arn
              - !GetAtt DatabaseKmsKey.Arn

  WriteUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Environment}-${AWS::StackName}-write-user-services"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  WriteUserServicesCSLSSubscription:
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Logs/Subscription/CSLS/ARN}}"
      FilterPattern: ""
      LogGroupName: !Ref WriteUserServicesFunctionLogGroup

  WriteDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [!Ref AWS::StackName, !Ref Environment, WriteDeadLetterQueueAlarm],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt WriteUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  ######################
  # Deleting the Record
  ######################

  UserAccountDeletionTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: UserAccountDeletionTopic
      KmsMasterKeyId: !Ref SnsKmsKey
      TopicName: UserAccountDeletion

  DeleteUserServicesSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt DeleteUserServicesFunction.Arn
      Protocol: lambda
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UserAccountDeletionTopicDeadLetterQueue.Arn
      TopicArn: !Ref UserAccountDeletionTopic

  DeleteTopicArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ARN of the Delete Event Topic
      Name: !Sub "/${AWS::StackName}/SNS/DeleteTopic/ARN"
      Type: String
      Value: !Ref UserAccountDeletionTopic

  DeleteUserServicesLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: UserAccountDeletionTopic
      FunctionName: !GetAtt DeleteUserServicesFunction.Arn

  DeleteUserServicesFunction:
    DependsOn:
      - DeleteUserServicesFunctionLogGroup
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-${AWS::StackName}-delete-user-services
      Architectures: ["x86_64"]
      CodeUri: ../lambda/delete-user-services/
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt DeleteUserServicesDeadLetterQueue.Arn
      Handler: delete-user-services.handler
      KmsKeyArn: !GetAtt LambdaKMSKey.Arn
      PackageType: Zip
      MemorySize: 128
      ReservedConcurrentExecutions: 10
      Runtime: nodejs16.x
      Role: !GetAtt DeleteUserServicesRole.Arn
      Timeout: 5
      Environment:
        Variables:
          TABLE_NAME: !Ref UserServicesStoreTableName
          DLQ_URL: !Ref DeleteUserServicesDeadLetterQueue
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
          - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - delete-user-services.ts

  DeleteUserServicesRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - !Ref DeleteUserServicesPolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  DeleteUserServicesPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
            Resource: !GetAtt DeleteUserServicesDeadLetterQueue.Arn
          - Effect: Allow
            Action:
              - dynamodb:DeleteItem
            Resource:
              - !GetAtt UserServicesStore.Arn
              - !Sub
                - "${Arn}/*"
                - Arn: !GetAtt UserServicesStore.Arn
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt QueueKmsKey.Arn
              - !GetAtt DatabaseKmsKey.Arn
              - !GetAtt LoggingKmsKey.Arn
              - !GetAtt LambdaKMSKey.Arn

  DeleteUserServicesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-delete-user-service-log-group"
      RetentionInDays: 30
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  DeleteUserServicesCSLSSubscription:
    Condition: IsNotDevelopment
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub "{{resolve:ssm:/${Environment}/Platform/Logs/Subscription/CSLS/ARN}}"
      FilterPattern: ""
      LogGroupName: !Ref DeleteUserServicesFunctionLogGroup

  DeleteUserServicesDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  UserAccountDeletionTopicDeadLetterQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  UserAccountDeletionTopicDeadLetterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UserAccountDeletionTopicDeadLetterQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: "sqs:SendMessage"
            Resource: !GetAtt UserAccountDeletionTopicDeadLetterQueue.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref UserAccountDeletionTopic

  UserAccountDeletionTopicDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [
            !Ref AWS::StackName,
            !Ref Environment,
            UserAccountDeletionTopicDeadLetterQueueAlarm,
          ],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt UserAccountDeletionTopicDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  DeleteDeadLetterQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        !Join [
          "-",
          [!Ref AWS::StackName, !Ref Environment, DeleteDeadLetterQueueAlarm],
        ]
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible"
      Dimensions:
        - Name: "QueueName"
          Value: !GetAtt DeleteUserServicesDeadLetterQueue.QueueName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      AlarmActions:
        - !Ref AlarmNotificationTopic
      ActionsEnabled: true

  #######################
  # Monitoring
  #######################
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      KmsMasterKeyId: !GetAtt QueueKmsKey.Arn

  AlarmNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref AlarmNotificationTopic
      PolicyDocument:
        Statement:
          - Action: "sns:Publish"
            Effect: Allow
            Resource: !Ref AlarmNotificationTopic
            Principal:
              Service: cloudwatch.amazonaws.com

  DeadLetterEmailSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: govuk-accounts-developers@digital.cabinet-office.gov.uk
      Protocol: email
      TopicArn: !Ref AlarmNotificationTopic

  #######################
  # Encryption
  #######################

  QueueKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: kms:*
            Resource:
              - "*"

  QueueKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/QueueKmsKey"
      TargetKeyId: !Ref QueueKmsKey

  DatabaseKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - "*"

  DatabaseKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/DatabaseKmsKey"
      TargetKeyId: !Ref DatabaseKmsKey

  DatabaseKmsKeyIDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ID of the Database KMS Key
      Name: !Sub "/${AWS::StackName}/KMS/DatabaseKmsKey/ID"
      Type: String
      Value: !Ref DatabaseKmsKey

  LambdaKMSKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "kms:Decrypt"
            Resource: "*"

  LambdaKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LambdaKMSKey"
      TargetKeyId: !Ref LambdaKMSKey

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  LoggingKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/LoggingKmsKey"
      TargetKeyId: !Ref LoggingKmsKey

  SnsKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: kms:*
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: kms:*
            Resource:
              - "*"

  SnsKmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}/${Environment}/SnsKmsKey"
      TargetKeyId: !Ref SnsKmsKey

  SnsKmsKeyIDParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: The ID of the SNS KMS Key
      Name: !Sub "/${AWS::StackName}/KMS/SnsKmsKey/ID"
      Type: String
      Value: !Ref SnsKmsKey
